// <auto-generated />
using System;
using CourseWorkpiece.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourseWorkpiece.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240925165324_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("CourseWorkpiece.Models.Lecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("CourseWorkpiece.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("sGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("sGroupId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("CourseWorkpiece.Models.Traffic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LectureId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrafficNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypeTraffic")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LectureId");

                    b.HasIndex("StudentId");

                    b.ToTable("Traffics");
                });

            modelBuilder.Entity("CourseWorkpiece.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("sGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("sGroupId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CourseWorkpiece.Models.sGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NameGroup")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("sGroups");
                });

            modelBuilder.Entity("CourseWorkpiece.Models.Student", b =>
                {
                    b.HasOne("CourseWorkpiece.Models.sGroup", "sGroup")
                        .WithMany("Students")
                        .HasForeignKey("sGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("sGroup");
                });

            modelBuilder.Entity("CourseWorkpiece.Models.Traffic", b =>
                {
                    b.HasOne("CourseWorkpiece.Models.Lecture", "Lecture")
                        .WithMany("Traffics")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseWorkpiece.Models.Student", "Student")
                        .WithMany("Traffics")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecture");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CourseWorkpiece.Models.User", b =>
                {
                    b.HasOne("CourseWorkpiece.Models.sGroup", "sGroup")
                        .WithOne("User")
                        .HasForeignKey("CourseWorkpiece.Models.User", "sGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("sGroup");
                });

            modelBuilder.Entity("CourseWorkpiece.Models.Lecture", b =>
                {
                    b.Navigation("Traffics");
                });

            modelBuilder.Entity("CourseWorkpiece.Models.Student", b =>
                {
                    b.Navigation("Traffics");
                });

            modelBuilder.Entity("CourseWorkpiece.Models.sGroup", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
